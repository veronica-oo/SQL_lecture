create database lecture_db;

use lecture_db;

create table address(
id int not null primary key auto_increment,
city varchar(255),
zip_code varchar(255) not null
);

-- drop table address;

-- SELECT: retrieve data from the collection
select * from address;
select id as addressId, zip_code as zipCode from address;

-- INSERT: 
insert into address(CITY, ZIP_CODE) values('Alvesta', '34231');
insert into address(CITY, ZIP_CODE) values('Alvesta', '34265');
insert into address(CITY, ZIP_CODE) values('Växjö', '34231');
select * from address;


-- UPDATE
-- NOTE: update and delete should be done with the primary key reference
update address set zip_code = '34238' where id = 2;

-- remove table content but keep the table
truncate table address;

-- DELETE
delete from address where id = 3;

-- ALTER TABLE, alter is used for modifying the table STRUCTURE
-- insert row, add column
alter table address modify city varchar(20);
alter table address add street varchar(20);
alter table address add street varchar(20) default 'TEST';
alter table address drop street;

-- one to one, e.g. person to address
create table person (
id int   not null   primary key   auto_increment,
first_name varchar(255) not null,
last_name varchar(255) not null,
email varchar(255) not null unique, 
birth_date date not null,
reg_date datetime  default now(),  -- date and time row was added
_active tinyint default false,   -- active is a reserved word in MySQL, thus. underscore b4 it
address_id int not null,
foreign key (address_id) references address(id)
-- the aboove code is used to link the person table to address table
);

drop table person;
select * from person;
insert into person(first_name, last_name, email, birth_date, address_id) values('Mehrdad', 'Javan', 'mehrdad.javan@lexicon.se', '2020-01-01' , 1);
insert into person(first_name, last_name, email, birth_date, address_id) values('Simon', 'Elbrink', 'simon.elbrink@lexicon.se', '2020-01-01' ,2);
insert into person(first_name, last_name, email, birth_date, address_id) values('Marcus', 'Gudmunsen', 'marcus.gudmonsen@lexicon.se', '2020-01-01' ,4);
insert into person(first_name, last_name, email, birth_date, address_id) values('test', 'test', 'test.test@lexicon.se', '2020-01-01' ,3);


-- One To Many (Task _ Person)
create table task(
id int   not null   primary key   auto_increment,
title varchar(255) not null,
_description varchar(500),
person_id int,
foreign key (person_id) references person(id)
);

insert into task(title, _description, person_id) values('workshop', 'sql', 1);
insert into task(title, _description) values('task2', 'test task');
insert into task(title, _description, person_id) values('task3', 'test task3', 1);
insert into task(title, _description, person_id) values('task4', 'test task4', 2);
insert into task(title, _description, person_id) values('task5', 'test task5', 4);

select * from task; 

select * from task where id in(1,2);  -- select more than one item of ref

select * from task where title like 't%'; -- task title that starts with t, note that % is behind

select * from task where title like '%task%'; -- title contains the word task

select * from task where id = 1 and title = 'workshop'; -- or can also be used

-- you can write a short code for a table, i.e. an alias... see below
select * from task t;

-- to find the relationship between tables, e.g., find info about the person a task is assigned to. 
-- JOIN is used to combine rows from two or more tables
-- JOINING task table to person table. the command word, JOIN, requires a condition: ON
-- in the below query; select all from task, join to person on the condition that t.person_id = p.id

select * from task t join person p on t.person_id = p.id; -- prints task JOINED to person information

-- the joined tables can also be filtered for specific entries
-- NOTE: inner join and join perform similar functions, prints the intersection between tables, shared data that is matched
-- in table 1 and 2
select t.id, t.title, p.email from task t inner join person p on t.person_id = p.id;

-- LEFT JOIN links everything in the left table + the interception.
select t.id, t.title, p.email from task t left join person p on t.person_id = p.id;


-- MANY TO MANY relationship
create table _group(
id int   not null   primary key   auto_increment,
group_name varchar(255) not null
);

-- INSERT data into the table without using command lines by
-- right clicking on the group table under schema, and clicking: select rows. Fill each cell by double-clicking & filling in
-- after, click apply, it generates the command queries automatically

select * from _group;

create table persons_groups(
id int not null primary key auto_increment,
person_id int not null,
group_id int not null,
foreign key (person_id) references person(id),
foreign key (group_id) references _group(id)
);

select * from persons_groups;

select count(*) from person;
select sum(id) from person;

select * from person;